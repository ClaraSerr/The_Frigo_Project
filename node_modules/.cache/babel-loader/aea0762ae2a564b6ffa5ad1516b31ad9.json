{"ast":null,"code":"var _jsxFileName = \"/home/thomas/depinfo/aSoftware/clara/The_Frigo_Project (1)/src/Components/ComboBox/ComboBox.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport axios from \"axios\";\nimport ListMeals from \"../ListMeals/ListMeals\";\nimport { useState, useEffect } from \"react\";\nimport \"./comboBox.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ComboBox(props) {\n  _s();\n\n  const [listIngredients, setArray] = useState([\"\", \"\"]);\n  const [value, setValue] = React.useState(props.data[0]);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const ingr = [];\n\n  function affichage(arg) {\n    if (typeof arg != \"undefined\") {\n      return /*#__PURE__*/_jsxDEV(ListMeals, {\n        data: arg.strIngredient\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n  for (const [index, valeur] of props.data.entries()) {\n    ingr.push(valeur.strIngredient);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"barreRech\",\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      id: \"combo-box-ingr\",\n      value: value,\n      onChange: (event, newValue) => {\n        if (newValue != null) {\n          setValue(newValue);\n        }\n      },\n      onInputChange: (event, newInputValue) => {\n        if (newInputValue != null) {\n          setInputValue(newInputValue);\n        }\n      },\n      options: props.data,\n      getOptionLabel: option => option.strIngredient,\n      style: {\n        width: 300\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: \"Ingredient principal\",\n        variant: \"outlined\",\n        onKeyDown: e => {\n          if (e.key === \"Enter\" && ingr.includes(inputValue)) setValue(props.data.find(element => element.strIngredient == inputValue));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: affichage(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ComboBox, \"RDbRF8kBWBqgjuNmewOrKifzcXc=\");\n\n_c = ComboBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComboBox\");","map":{"version":3,"sources":["/home/thomas/depinfo/aSoftware/clara/The_Frigo_Project (1)/src/Components/ComboBox/ComboBox.js"],"names":["React","TextField","Autocomplete","axios","ListMeals","useState","useEffect","ComboBox","props","listIngredients","setArray","value","setValue","data","inputValue","setInputValue","ingr","affichage","arg","strIngredient","index","valeur","entries","push","event","newValue","newInputValue","option","width","params","e","key","includes","find","element"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,gBAAP;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACtC,QAAM,CAACC,eAAD,EAAkBC,QAAlB,IAA8BL,QAAQ,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,CAA5C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBZ,KAAK,CAACK,QAAN,CAAeG,KAAK,CAACK,IAAN,CAAW,CAAX,CAAf,CAA1B;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,KAAK,CAACK,QAAN,CAAe,EAAf,CAApC;AACA,QAAMW,IAAI,GAAG,EAAb;;AAEA,WAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,QAAI,OAAOA,GAAP,IAAc,WAAlB,EAA+B;AAC7B,0BAAO,QAAC,SAAD;AAAW,QAAA,IAAI,EAAEA,GAAG,CAACC;AAArB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACF;;AAED,OAAK,MAAM,CAACC,KAAD,EAAQC,MAAR,CAAX,IAA8Bb,KAAK,CAACK,IAAN,CAAWS,OAAX,EAA9B,EAAoD;AAClDN,IAAAA,IAAI,CAACO,IAAL,CAAUF,MAAM,CAACF,aAAjB;AACD;;AACD,sBACE;AAAK,IAAA,KAAK,EAAC,WAAX;AAAA,4BACE,QAAC,YAAD;AACE,MAAA,EAAE,EAAC,gBADL;AAEE,MAAA,KAAK,EAAER,KAFT;AAGE,MAAA,QAAQ,EAAE,CAACa,KAAD,EAAQC,QAAR,KAAqB;AAC7B,YAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpBb,UAAAA,QAAQ,CAACa,QAAD,CAAR;AACD;AACF,OAPH;AAQE,MAAA,aAAa,EAAE,CAACD,KAAD,EAAQE,aAAR,KAA0B;AACvC,YAAIA,aAAa,IAAI,IAArB,EAA2B;AACzBX,UAAAA,aAAa,CAACW,aAAD,CAAb;AACD;AACF,OAZH;AAaE,MAAA,OAAO,EAAElB,KAAK,CAACK,IAbjB;AAcE,MAAA,cAAc,EAAGc,MAAD,IAAYA,MAAM,CAACR,aAdrC;AAeE,MAAA,KAAK,EAAE;AAAES,QAAAA,KAAK,EAAE;AAAT,OAfT;AAgBE,MAAA,WAAW,EAAGC,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,QAAA,KAAK,EAAC,sBAFR;AAGE,QAAA,OAAO,EAAC,UAHV;AAIE,QAAA,SAAS,EAAGC,CAAD,IAAO;AAChB,cAAIA,CAAC,CAACC,GAAF,KAAU,OAAV,IAAqBf,IAAI,CAACgB,QAAL,CAAclB,UAAd,CAAzB,EACEF,QAAQ,CACNJ,KAAK,CAACK,IAAN,CAAWoB,IAAX,CACGC,OAAD,IAAaA,OAAO,CAACf,aAAR,IAAyBL,UADxC,CADM,CAAR;AAKH;AAXH;AAAA;AAAA;AAAA;AAAA;AAjBJ;AAAA;AAAA;AAAA;AAAA,YADF,eAiCE;AAAA,gBAAMG,SAAS,CAACN,KAAD;AAAf;AAAA;AAAA;AAAA;AAAA,YAjCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD;;GApDuBJ,Q;;KAAAA,Q","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport axios from \"axios\";\nimport ListMeals from \"../ListMeals/ListMeals\";\nimport { useState, useEffect } from \"react\";\nimport \"./comboBox.css\";\n\nexport default function ComboBox(props) {\n  const [listIngredients, setArray] = useState([\"\", \"\"]);\n  const [value, setValue] = React.useState(props.data[0]);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const ingr = [];\n\n  function affichage(arg) {\n    if (typeof arg != \"undefined\") {\n      return <ListMeals data={arg.strIngredient}></ListMeals>;\n    }\n  }\n\n  for (const [index, valeur] of props.data.entries()) {\n    ingr.push(valeur.strIngredient);\n  }\n  return (\n    <div class=\"barreRech\">\n      <Autocomplete\n        id=\"combo-box-ingr\"\n        value={value}\n        onChange={(event, newValue) => {\n          if (newValue != null) {\n            setValue(newValue);\n          }\n        }}\n        onInputChange={(event, newInputValue) => {\n          if (newInputValue != null) {\n            setInputValue(newInputValue);\n          }\n        }}\n        options={props.data}\n        getOptionLabel={(option) => option.strIngredient}\n        style={{ width: 300 }}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Ingredient principal\"\n            variant=\"outlined\"\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" && ingr.includes(inputValue))\n                setValue(\n                  props.data.find(\n                    (element) => element.strIngredient == inputValue\n                  )\n                );\n            }}\n          />\n        )}\n      />\n      <div>{affichage(value)}</div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}