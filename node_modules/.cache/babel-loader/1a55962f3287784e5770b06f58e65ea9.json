{"ast":null,"code":"import vis from 'vis-network';\nimport { Network } from 'vis-network';\nimport './MyGraph.css';\nvar nodes = [{\n  id: 100,\n  label: \"This node has no fixed, minimum or maximum width or height\",\n  x: -50,\n  y: -300\n}, {\n  id: 210,\n  widthConstraint: {\n    minimum: 120\n  },\n  label: \"This node has a mimimum width\",\n  x: -400,\n  y: -200\n}, {\n  id: 211,\n  widthConstraint: {\n    minimum: 120\n  },\n  label: \"...so does this\",\n  x: -500,\n  y: -50\n}, {\n  id: 220,\n  widthConstraint: {\n    maximum: 170\n  },\n  label: \"This node has a maximum width and breaks have been automatically inserted into the label\",\n  x: -150,\n  y: -150\n}, {\n  id: 221,\n  widthConstraint: {\n    maximum: 170\n  },\n  label: \"...this too\",\n  x: -100,\n  y: 0\n}, {\n  id: 200,\n  font: {\n    multi: true\n  },\n  widthConstraint: 150,\n  label: \"<b>This</b> node has a fixed width and breaks have been automatically inserted into the label\",\n  x: -300,\n  y: 50\n}, {\n  id: 201,\n  widthConstraint: 150,\n  label: \"...this as well\",\n  x: -300,\n  y: 200\n}, {\n  id: 300,\n  heightConstraint: {\n    minimum: 70\n  },\n  label: \"This node\\nhas a\\nminimum\\nheight\",\n  x: 100,\n  y: -150\n}, {\n  id: 301,\n  heightConstraint: {\n    minimum: 70\n  },\n  label: \"...this one here too\",\n  x: 100,\n  y: 0\n}, {\n  id: 400,\n  heightConstraint: {\n    minimum: 100,\n    valign: \"top\"\n  },\n  label: \"Minimum height\\nvertical alignment\\nmay be top\",\n  x: 300,\n  y: -200\n}, {\n  id: 401,\n  heightConstraint: {\n    minimum: 100,\n    valign: \"middle\"\n  },\n  label: \"Minimum height\\nvertical alignment\\nmay be middle\\n(default)\",\n  x: 300,\n  y: 0\n}, {\n  id: 402,\n  heightConstraint: {\n    minimum: 100,\n    valign: \"bottom\"\n  },\n  label: \"Minimum height\\nvertical alignment\\nmay be bottom\",\n  x: 300,\n  y: 200\n}];\nvar edges = [{\n  from: 100,\n  to: 210,\n  label: \"unconstrained to minimum width\"\n}, {\n  from: 210,\n  to: 211,\n  label: \"more minimum width\"\n}, {\n  from: 100,\n  to: 220,\n  label: \"unconstrained to maximum width\"\n}, {\n  from: 220,\n  to: 221,\n  label: \"more maximum width\"\n}, {\n  from: 210,\n  to: 200,\n  label: \"minimum width to fixed width\"\n}, {\n  from: 220,\n  to: 200,\n  label: \"maximum width to fixed width\"\n}, {\n  from: 200,\n  to: 201,\n  label: \"more fixed width\"\n}, {\n  from: 100,\n  to: 300,\n  label: \"unconstrained to minimum height\"\n}, {\n  from: 300,\n  to: 301,\n  label: \"more minimum height\"\n}, {\n  from: 100,\n  to: 400,\n  label: \"unconstrained to top valign\"\n}, {\n  from: 400,\n  to: 401,\n  label: \"top valign to middle valign\"\n}, {\n  from: 401,\n  to: 402,\n  widthConstraint: {\n    maximum: 150\n  },\n  label: \"middle valign to bottom valign\"\n}];\nvar container = document.getElementById(\"mynetwork\");\nvar data = {\n  nodes: nodes,\n  edges: edges\n};\nvar options = {\n  edges: {\n    font: {\n      size: 12\n    },\n    widthConstraint: {\n      maximum: 90\n    }\n  },\n  nodes: {\n    shape: \"box\",\n    margin: 10,\n    widthConstraint: {\n      maximum: 200\n    }\n  },\n  physics: {\n    enabled: false\n  }\n};\nvar network = new vis.Network(container, data, options);","map":{"version":3,"sources":["/home/oem/Documents/test/src/Components/MyGraph/MyGraph.js"],"names":["vis","Network","nodes","id","label","x","y","widthConstraint","minimum","maximum","font","multi","heightConstraint","valign","edges","from","to","container","document","getElementById","data","options","size","shape","margin","physics","enabled","network"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAO,eAAP;AAEA,IAAIC,KAAK,GAAG,CACR;AACEC,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,KAAK,EAAE,4DAFT;AAGEC,EAAAA,CAAC,EAAE,CAAC,EAHN;AAIEC,EAAAA,CAAC,EAAE,CAAC;AAJN,CADQ,EAOR;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEI,EAAAA,eAAe,EAAE;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAFnB;AAGEJ,EAAAA,KAAK,EAAE,+BAHT;AAIEC,EAAAA,CAAC,EAAE,CAAC,GAJN;AAKEC,EAAAA,CAAC,EAAE,CAAC;AALN,CAPQ,EAcR;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEI,EAAAA,eAAe,EAAE;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAFnB;AAGEJ,EAAAA,KAAK,EAAE,iBAHT;AAIEC,EAAAA,CAAC,EAAE,CAAC,GAJN;AAKEC,EAAAA,CAAC,EAAE,CAAC;AALN,CAdQ,EAqBR;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEI,EAAAA,eAAe,EAAE;AAAEE,IAAAA,OAAO,EAAE;AAAX,GAFnB;AAGEL,EAAAA,KAAK,EACH,0FAJJ;AAKEC,EAAAA,CAAC,EAAE,CAAC,GALN;AAMEC,EAAAA,CAAC,EAAE,CAAC;AANN,CArBQ,EA6BR;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEI,EAAAA,eAAe,EAAE;AAAEE,IAAAA,OAAO,EAAE;AAAX,GAFnB;AAGEL,EAAAA,KAAK,EAAE,aAHT;AAIEC,EAAAA,CAAC,EAAE,CAAC,GAJN;AAKEC,EAAAA,CAAC,EAAE;AALL,CA7BQ,EAoCR;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEO,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAFR;AAGEJ,EAAAA,eAAe,EAAE,GAHnB;AAIEH,EAAAA,KAAK,EACH,+FALJ;AAMEC,EAAAA,CAAC,EAAE,CAAC,GANN;AAOEC,EAAAA,CAAC,EAAE;AAPL,CApCQ,EA6CR;AACEH,EAAAA,EAAE,EAAE,GADN;AAEEI,EAAAA,eAAe,EAAE,GAFnB;AAGEH,EAAAA,KAAK,EAAE,iBAHT;AAIEC,EAAAA,CAAC,EAAE,CAAC,GAJN;AAKEC,EAAAA,CAAC,EAAE;AALL,CA7CQ,EAoDR;AACEH,EAAAA,EAAE,EAAE,GADN;AAEES,EAAAA,gBAAgB,EAAE;AAAEJ,IAAAA,OAAO,EAAE;AAAX,GAFpB;AAGEJ,EAAAA,KAAK,EAAE,mCAHT;AAIEC,EAAAA,CAAC,EAAE,GAJL;AAKEC,EAAAA,CAAC,EAAE,CAAC;AALN,CApDQ,EA2DR;AACEH,EAAAA,EAAE,EAAE,GADN;AAEES,EAAAA,gBAAgB,EAAE;AAAEJ,IAAAA,OAAO,EAAE;AAAX,GAFpB;AAGEJ,EAAAA,KAAK,EAAE,sBAHT;AAIEC,EAAAA,CAAC,EAAE,GAJL;AAKEC,EAAAA,CAAC,EAAE;AALL,CA3DQ,EAkER;AACEH,EAAAA,EAAE,EAAE,GADN;AAEES,EAAAA,gBAAgB,EAAE;AAAEJ,IAAAA,OAAO,EAAE,GAAX;AAAgBK,IAAAA,MAAM,EAAE;AAAxB,GAFpB;AAGET,EAAAA,KAAK,EAAE,gDAHT;AAIEC,EAAAA,CAAC,EAAE,GAJL;AAKEC,EAAAA,CAAC,EAAE,CAAC;AALN,CAlEQ,EAyER;AACEH,EAAAA,EAAE,EAAE,GADN;AAEES,EAAAA,gBAAgB,EAAE;AAAEJ,IAAAA,OAAO,EAAE,GAAX;AAAgBK,IAAAA,MAAM,EAAE;AAAxB,GAFpB;AAGET,EAAAA,KAAK,EAAE,8DAHT;AAIEC,EAAAA,CAAC,EAAE,GAJL;AAKEC,EAAAA,CAAC,EAAE;AALL,CAzEQ,EAgFR;AACEH,EAAAA,EAAE,EAAE,GADN;AAEES,EAAAA,gBAAgB,EAAE;AAAEJ,IAAAA,OAAO,EAAE,GAAX;AAAgBK,IAAAA,MAAM,EAAE;AAAxB,GAFpB;AAGET,EAAAA,KAAK,EAAE,mDAHT;AAIEC,EAAAA,CAAC,EAAE,GAJL;AAKEC,EAAAA,CAAC,EAAE;AALL,CAhFQ,CAAZ;AAyFE,IAAIQ,KAAK,GAAG,CACV;AAAEC,EAAAA,IAAI,EAAE,GAAR;AAAaC,EAAAA,EAAE,EAAE,GAAjB;AAAsBZ,EAAAA,KAAK,EAAE;AAA7B,CADU,EAEV;AAAEW,EAAAA,IAAI,EAAE,GAAR;AAAaC,EAAAA,EAAE,EAAE,GAAjB;AAAsBZ,EAAAA,KAAK,EAAE;AAA7B,CAFU,EAGV;AAAEW,EAAAA,IAAI,EAAE,GAAR;AAAaC,EAAAA,EAAE,EAAE,GAAjB;AAAsBZ,EAAAA,KAAK,EAAE;AAA7B,CAHU,EAIV;AAAEW,EAAAA,IAAI,EAAE,GAAR;AAAaC,EAAAA,EAAE,EAAE,GAAjB;AAAsBZ,EAAAA,KAAK,EAAE;AAA7B,CAJU,EAKV;AAAEW,EAAAA,IAAI,EAAE,GAAR;AAAaC,EAAAA,EAAE,EAAE,GAAjB;AAAsBZ,EAAAA,KAAK,EAAE;AAA7B,CALU,EAMV;AAAEW,EAAAA,IAAI,EAAE,GAAR;AAAaC,EAAAA,EAAE,EAAE,GAAjB;AAAsBZ,EAAAA,KAAK,EAAE;AAA7B,CANU,EAOV;AAAEW,EAAAA,IAAI,EAAE,GAAR;AAAaC,EAAAA,EAAE,EAAE,GAAjB;AAAsBZ,EAAAA,KAAK,EAAE;AAA7B,CAPU,EAQV;AAAEW,EAAAA,IAAI,EAAE,GAAR;AAAaC,EAAAA,EAAE,EAAE,GAAjB;AAAsBZ,EAAAA,KAAK,EAAE;AAA7B,CARU,EASV;AAAEW,EAAAA,IAAI,EAAE,GAAR;AAAaC,EAAAA,EAAE,EAAE,GAAjB;AAAsBZ,EAAAA,KAAK,EAAE;AAA7B,CATU,EAUV;AAAEW,EAAAA,IAAI,EAAE,GAAR;AAAaC,EAAAA,EAAE,EAAE,GAAjB;AAAsBZ,EAAAA,KAAK,EAAE;AAA7B,CAVU,EAWV;AAAEW,EAAAA,IAAI,EAAE,GAAR;AAAaC,EAAAA,EAAE,EAAE,GAAjB;AAAsBZ,EAAAA,KAAK,EAAE;AAA7B,CAXU,EAYV;AACEW,EAAAA,IAAI,EAAE,GADR;AAEEC,EAAAA,EAAE,EAAE,GAFN;AAGET,EAAAA,eAAe,EAAE;AAAEE,IAAAA,OAAO,EAAE;AAAX,GAHnB;AAIEL,EAAAA,KAAK,EAAE;AAJT,CAZU,CAAZ;AAoBA,IAAIa,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAhB;AACA,IAAIC,IAAI,GAAG;AACTlB,EAAAA,KAAK,EAAEA,KADE;AAETY,EAAAA,KAAK,EAAEA;AAFE,CAAX;AAIA,IAAIO,OAAO,GAAG;AACZP,EAAAA,KAAK,EAAE;AACLJ,IAAAA,IAAI,EAAE;AACJY,MAAAA,IAAI,EAAE;AADF,KADD;AAILf,IAAAA,eAAe,EAAE;AACfE,MAAAA,OAAO,EAAE;AADM;AAJZ,GADK;AASZP,EAAAA,KAAK,EAAE;AACLqB,IAAAA,KAAK,EAAE,KADF;AAELC,IAAAA,MAAM,EAAE,EAFH;AAGLjB,IAAAA,eAAe,EAAE;AACfE,MAAAA,OAAO,EAAE;AADM;AAHZ,GATK;AAgBZgB,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE;AADF;AAhBG,CAAd;AAoBA,IAAIC,OAAO,GAAG,IAAI3B,GAAG,CAACC,OAAR,CAAgBgB,SAAhB,EAA2BG,IAA3B,EAAiCC,OAAjC,CAAd","sourcesContent":["import vis from 'vis-network'\nimport {Network} from 'vis-network'\nimport './MyGraph.css'\n\nvar nodes = [\n    {\n      id: 100,\n      label: \"This node has no fixed, minimum or maximum width or height\",\n      x: -50,\n      y: -300,\n    },\n    {\n      id: 210,\n      widthConstraint: { minimum: 120 },\n      label: \"This node has a mimimum width\",\n      x: -400,\n      y: -200,\n    },\n    {\n      id: 211,\n      widthConstraint: { minimum: 120 },\n      label: \"...so does this\",\n      x: -500,\n      y: -50,\n    },\n    {\n      id: 220,\n      widthConstraint: { maximum: 170 },\n      label:\n        \"This node has a maximum width and breaks have been automatically inserted into the label\",\n      x: -150,\n      y: -150,\n    },\n    {\n      id: 221,\n      widthConstraint: { maximum: 170 },\n      label: \"...this too\",\n      x: -100,\n      y: 0,\n    },\n    {\n      id: 200,\n      font: { multi: true },\n      widthConstraint: 150,\n      label:\n        \"<b>This</b> node has a fixed width and breaks have been automatically inserted into the label\",\n      x: -300,\n      y: 50,\n    },\n    {\n      id: 201,\n      widthConstraint: 150,\n      label: \"...this as well\",\n      x: -300,\n      y: 200,\n    },\n    {\n      id: 300,\n      heightConstraint: { minimum: 70 },\n      label: \"This node\\nhas a\\nminimum\\nheight\",\n      x: 100,\n      y: -150,\n    },\n    {\n      id: 301,\n      heightConstraint: { minimum: 70 },\n      label: \"...this one here too\",\n      x: 100,\n      y: 0,\n    },\n    {\n      id: 400,\n      heightConstraint: { minimum: 100, valign: \"top\" },\n      label: \"Minimum height\\nvertical alignment\\nmay be top\",\n      x: 300,\n      y: -200,\n    },\n    {\n      id: 401,\n      heightConstraint: { minimum: 100, valign: \"middle\" },\n      label: \"Minimum height\\nvertical alignment\\nmay be middle\\n(default)\",\n      x: 300,\n      y: 0,\n    },\n    {\n      id: 402,\n      heightConstraint: { minimum: 100, valign: \"bottom\" },\n      label: \"Minimum height\\nvertical alignment\\nmay be bottom\",\n      x: 300,\n      y: 200,\n    },\n  ];\n  \n  var edges = [\n    { from: 100, to: 210, label: \"unconstrained to minimum width\" },\n    { from: 210, to: 211, label: \"more minimum width\" },\n    { from: 100, to: 220, label: \"unconstrained to maximum width\" },\n    { from: 220, to: 221, label: \"more maximum width\" },\n    { from: 210, to: 200, label: \"minimum width to fixed width\" },\n    { from: 220, to: 200, label: \"maximum width to fixed width\" },\n    { from: 200, to: 201, label: \"more fixed width\" },\n    { from: 100, to: 300, label: \"unconstrained to minimum height\" },\n    { from: 300, to: 301, label: \"more minimum height\" },\n    { from: 100, to: 400, label: \"unconstrained to top valign\" },\n    { from: 400, to: 401, label: \"top valign to middle valign\" },\n    {\n      from: 401,\n      to: 402,\n      widthConstraint: { maximum: 150 },\n      label: \"middle valign to bottom valign\",\n    },\n  ];\n  \n  var container = document.getElementById(\"mynetwork\");\n  var data = {\n    nodes: nodes,\n    edges: edges,\n  };\n  var options = {\n    edges: {\n      font: {\n        size: 12,\n      },\n      widthConstraint: {\n        maximum: 90,\n      },\n    },\n    nodes: {\n      shape: \"box\",\n      margin: 10,\n      widthConstraint: {\n        maximum: 200,\n      },\n    },\n    physics: {\n      enabled: false,\n    },\n  };\n  var network = new vis.Network(container, data, options);"]},"metadata":{},"sourceType":"module"}